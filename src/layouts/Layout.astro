---
import Header from "@components/Header.astro";
import "@fontsource/inter";

export interface Props {
  title?: string;
  description?: string;
  heroImage?: string;
  imageAlt?: string;
}

const defaultMeta = {
  title: "Lance Ross",
  description: "I'm a student web dev and a JAMStack enjoyer.",
  image: "/assets/default-og-image.png",
  imageAlt: "A Picture of Lance Ross with a Face Mask",
};

const { title = defaultMeta.title, description = defaultMeta.description, heroImage = defaultMeta.image, imageAlt = defaultMeta.imageAlt } = Astro.props as Props;
const canonicalURL = new URL(Astro.url).href;
---

<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <title>{title}</title>
    <link rel="canonical" href={canonicalURL} />
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={heroImage} />
    <meta property="og:image:alt" content={imageAlt} />
    <meta property="og:site_name" content="Lance Ross" />
    <meta property="og:locale" content="en_US" />
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalURL} />
    <meta name="twitter:site" content="@lancerossdev" />
    <meta name="twitter:creator" content="@lancerossdev" />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={heroImage} />
    <meta name="generator" content={Astro.generator} />
    <meta name="robots" content="follow, index" />
    <meta name="author" content="Lance Ross" />
    <script is:inline>
      // credits to satnaing on github
      const primaryColorScheme = "none";
      const darkModeMediaQuery = window.matchMedia("(prefers-color-scheme: dark)").matches;
      const currentTheme = localStorage.getItem("theme");
      let theme;
      if (currentTheme) {
        theme = currentTheme === "dark" ? "dark" : "";
      } else {
        if (primaryColorScheme === "dark" || (primaryColorScheme === "none" && darkModeMediaQuery)) {
          theme = "dark";
        } else if (primaryColorScheme === "light") {
          theme = "";
        } else {
          theme = darkModeMediaQuery ? "dark" : "";
        }
      }
      document.documentElement.className = theme;
    </script>
    <script>
      const themeBtn = document.querySelector(".theme-toggle");
      const htmlClassList = document.documentElement.classList;
      themeBtn.addEventListener("click", function () {
        if (htmlClassList.contains("dark")) {
          localStorage.setItem("theme", "light");
          htmlClassList.remove("dark");
        } else {
          localStorage.setItem("theme", "dark");
          htmlClassList.add("dark");
        }
      });
    </script>
  </head>
  <body class="transition scrollbar-thin scrollbar-thumb-zinc-400 scrollbar-track-zinc-300 dark:scrollbar-thumb-[#454b5f] dark:scrollbar-track-[#1d1f2a] dark:bg-[#101218] dark:text-white font-inter selection:bg-[#3d94ff42] text-xl">
    <Header />
    <main class="m-auto p-6 max-w-4xl md:p-8">
      <slot />
    </main>
  </body>
</html>
